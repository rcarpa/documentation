"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4387],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>f});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},p=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||i;return n?t.createElement(f,a(a({ref:r},p),{},{components:n})):t.createElement(f,a({ref:r},p))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[l]="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37439:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>l});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"rucio-dark-reaper"},s=void 0,u={unversionedId:"bin/rucio-dark-reaper",id:"bin/rucio-dark-reaper",title:"rucio-dark-reaper",description:"",source:"@site/../docs/bin/rucio-dark-reaper.md",sourceDirName:"bin",slug:"/bin/rucio-dark-reaper",permalink:"/documentation/bin/rucio-dark-reaper",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-dark-reaper.md",tags:[],version:"current",frontMatter:{title:"rucio-dark-reaper"},sidebar:"docs",previous:{title:"rucio-conveyor-throttler",permalink:"/documentation/bin/rucio-conveyor-throttler"},next:{title:"rucio-dumper",permalink:"/documentation/bin/rucio-dumper"}},p={},l=[],d={toc:l},m="wrapper";function f(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)(m,(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: rucio-dark-reaper [-h] [--run-once] [--total-workers TOTAL_WORKERS]\n                         [--chunk-size CHUNK_SIZE] [--scheme SCHEME]\n                         [--rses RSES [RSES ...]]\n                         [--exclude-rses EXCLUDE_RSES]\n                         [--include-rses INCLUDE_RSES] [--vos VOS [VOS ...]]\n                         [--sleep-time SLEEP_TIME]\n\nThe Dark-Reaper daemon is responsible for the deletion of quarantined\nreplicas.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-workers TOTAL_WORKERS\n                        Total number of workers per process\n  --chunk-size CHUNK_SIZE\n                        Chunk size\n  --scheme SCHEME       Force the reaper to use a particular protocol, e.g.,\n                        mock.\n  --rses RSES [RSES ...]\n                        List of RSEs\n  --exclude-rses EXCLUDE_RSES\n                        RSEs expression to exclude RSEs\n  --include-rses INCLUDE_RSES\n                        RSEs expression to include RSEs\n  --vos VOS [VOS ...]   Optional list of VOs to consider. Only used in multi-\n                        VO mode.\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n")))}f.isMDXComponent=!0}}]);