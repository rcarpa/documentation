"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7169],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,d=p["".concat(l,".").concat(m)]||p[m]||f[m]||a;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},59995:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],s={id:"transfers-throttler",title:"Transfers Throttler"},l=void 0,u={unversionedId:"transfers-throttler",id:"transfers-throttler",title:"Transfers Throttler",description:"As the name suggests, conveyor-throttler (transfer throttler) is used to",source:"@site/../docs/transfers_throttler.md",sourceDirName:".",slug:"/transfers-throttler",permalink:"/documentation/transfers-throttler",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/transfers_throttler.md",tags:[],version:"current",lastUpdatedBy:"Martin Barisits",lastUpdatedAt:1680536801,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{id:"transfers-throttler",title:"Transfers Throttler"},sidebar:"docs",previous:{title:"Transfers Preparer",permalink:"/documentation/transfers-preparer"},next:{title:"Transfers Submitter",permalink:"/documentation/transfers-submitter"}},c={},p=[],f={toc:p},m="wrapper";function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)(m,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As the name suggests, ",(0,a.kt)("inlineCode",{parentName:"p"},"conveyor-throttler")," (transfer throttler) is used to\nprotect the transfertools from overload by limiting the number of submitter\ntransfers at any particular moment of time. "),(0,a.kt)("p",null,"Preparer is required to be able to run throttler. See the preparer documentation\non how to activate it."),(0,a.kt)("p",null,"The rucio administrator must manually configure throttling rules.  As of time\nof writing, there is no CLI option in rucio-admin to do it. Rules have to be\nadded using the rucio core functions directly from a rucio node."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Warning"),": only set transfer limits if throttler is running. Otherwise,\npreparer will transition transfers to the ",(0,a.kt)("inlineCode",{parentName:"p"},"waiting")," state, but nobody will\nconsume the queue of waiting transfers. Leading to these transfers never\nbeing executed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from rucio.core.request import set_transfer_limit, list_transfer_limits\n\nlist(list_transfer_limits())\nset_transfer_limit("RSE1", max_transfers=100)\n')),(0,a.kt)("p",null,"The previous code snippet will create (or update) the 'destination' throttling\nrule for transfers towards RSE1. A maximum of 100 transfers will be allowed\nat a time towards RSE1. Note that \"RSE1\" here is an RSE expression, not\na name, complex RSE expressions can be used in rules. If more than one rule\napplies to a specific RSE, the more restrictive condition applies."),(0,a.kt)("p",null,"Throttler supports some advanced throttler techniques. Some of them are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"source throttling"),(0,a.kt)("li",{parentName:"ul"},"grouping of files from the same dataset together (grouped_fifo strategy)  ")),(0,a.kt)("p",null,"These techniques can be costly on the database and were not extensively tested.\nThe only technique we use in production is destination throttling."))}d.isMDXComponent=!0}}]);