"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41491:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>f,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"rucio-undertaker"},u=void 0,s={unversionedId:"bin/rucio-undertaker",id:"bin/rucio-undertaker",title:"rucio-undertaker",description:"",source:"@site/../docs/bin/rucio-undertaker.md",sourceDirName:"bin",slug:"/bin/rucio-undertaker",permalink:"/documentation/bin/rucio-undertaker",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-undertaker.md",tags:[],version:"current",frontMatter:{title:"rucio-undertaker"},sidebar:"docs",previous:{title:"rucio-transmogrifier",permalink:"/documentation/bin/rucio-transmogrifier"},next:{title:"rucio",permalink:"/documentation/bin/rucio"}},l={},p=[],d={toc:p},m="wrapper";function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: rucio-undertaker [-h] [--run-once] [--total-workers TOTAL_WORKERS]\n                        [--chunk-size CHUNK_SIZE] [--sleep-time SLEEP_TIME]\n\nThe Undertaker deamon is responsible for managing expired DIDs. It deletes DIDs, but not replicas by checking if there are DIDs where the 'expired_at' date property is older than the current timestamp.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-workers TOTAL_WORKERS\n                        Total number of workers\n  --chunk-size CHUNK_SIZE\n                        Chunk size\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n\nCreate a DID that is already expired by setting its lifetime to -1::\n\n  $ python\n  from rucio.db.sqla.constants import DIDType\n  from rucio.client.didclient import DIDClient\n  client = DIDClient()\n  client.add_did(scope='mock', name='test', type=DIDType.DATASET, lifetime=-1)\n\nCheck if the DID exists::\n\n  $ rucio list-dids mock:test\n  +--------------+--------------+\n  | SCOPE:NAME   | [DID TYPE]   |\n  |--------------+--------------|\n  | mock:test    | DATASET      |\n  +--------------+--------------+\n\nRun the daemon::\n\n  $ rucio-undertaker --run-once\n\nCheck if the DID exists::\n\n  $ rucio list-dids mock:test\n  +--------------+--------------+\n  | SCOPE:NAME   | [DID TYPE]   |\n  |--------------+--------------|\n  +--------------+--------------+\n")))}f.isMDXComponent=!0}}]);