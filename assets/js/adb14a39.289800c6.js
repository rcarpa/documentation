"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4461],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>f});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},l=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?t.createElement(f,c(c({ref:r},l),{},{components:n})):t.createElement(f,c({ref:r},l))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[m]="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=n[u];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84327:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>u,toc:()=>m});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],a={title:"rucio-hermes"},s=void 0,u={unversionedId:"bin/rucio-hermes",id:"bin/rucio-hermes",title:"rucio-hermes",description:"",source:"@site/../docs/bin/rucio-hermes.md",sourceDirName:"bin",slug:"/bin/rucio-hermes",permalink:"/documentation/bin/rucio-hermes",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-hermes.md",tags:[],version:"current",frontMatter:{title:"rucio-hermes"},sidebar:"docs",previous:{title:"rucio-follower",permalink:"/documentation/bin/rucio-follower"},next:{title:"rucio-hermes2",permalink:"/documentation/bin/rucio-hermes2"}},l={},m=[],p={toc:m},d="wrapper";function f(e){var r=e.components,n=(0,o.Z)(e,c);return(0,i.kt)(d,(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: rucio-hermes [-h] [--run-once] [--threads THREADS] [--bulk BULK]\n                    [--broker-timeout BROKER_TIMEOUT]\n                    [--broker-retry BROKER_RETRY] [--sleep-time SLEEP_TIME]\n\nThe Hermes daemon is responsible for delivering messages via STOMP to a messagebroker and via SMTP as email.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --threads THREADS     Concurrency control: number of threads\n  --bulk BULK           Bulk control: number of requests per cycle\n  --broker-timeout BROKER_TIMEOUT\n                        Broker control: timeout second per cycle\n  --broker-retry BROKER_RETRY\n                        Broker control: number of retries per cycle\n  --sleep-time SLEEP_TIME\n                        Delay control: second control per cycle\n\nCreate a test message::\n\n  $ python\n  from rucio.core.message import add_message\n  add_message(event_type='NEW_DID', payload='There is a new DID')\n\nRun the daemon::\n\n  $ rucio-hermes --run-once\n    \n")))}f.isMDXComponent=!0}}]);