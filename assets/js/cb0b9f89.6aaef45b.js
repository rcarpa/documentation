"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2640],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(t),f=o,d=l["".concat(s,".").concat(f)]||l[f]||m[f]||i;return t?n.createElement(d,c(c({ref:r},p),{},{components:t})):n.createElement(d,c({ref:r},p))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[l]="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=t[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},79490:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var n=t(87462),o=t(63366),i=(t(67294),t(3905)),c=["components"],a={title:"rucio-transmogrifier"},s=void 0,u={unversionedId:"bin/rucio-transmogrifier",id:"bin/rucio-transmogrifier",title:"rucio-transmogrifier",description:"",source:"@site/../docs/bin/rucio-transmogrifier.md",sourceDirName:"bin",slug:"/bin/rucio-transmogrifier",permalink:"/documentation/bin/rucio-transmogrifier",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-transmogrifier.md",tags:[],version:"current",frontMatter:{title:"rucio-transmogrifier"},sidebar:"docs",previous:{title:"rucio-storage-consistency-actions",permalink:"/documentation/bin/rucio-storage-consistency-actions"},next:{title:"rucio-undertaker",permalink:"/documentation/bin/rucio-undertaker"}},p={},l=[],m={toc:l},f="wrapper";function d(e){var r=e.components,t=(0,o.Z)(e,c);return(0,i.kt)(f,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'usage: rucio-transmogrifier [-h] [--run-once] [--threads THREADS]\n                            [--bulk BULK] [--sleep-time SLEEP_TIME]\n\nThe Transmogrifier daemon is responsible for the creation of replication rules for DIDs matching a subscription.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            Runs one loop iteration\n  --threads THREADS     Concurrency control: number of threads\n  --bulk BULK           Bulk control: number of requests per cycle\n  --sleep-time SLEEP_TIME\n                        Seconds to sleep between two cycles\n\nCreate a DID::\n\n  $ python\n  from rucio.core.did import add_did\n  from rucio.db.sqla.constants import DIDType\n  add_did(scope=\'mock\', name=\'test\', type=DIDType.DATASET, account=\'root\', meta={\'project\': \'test_project\'})\n\nCreate a subscription that matches the DID::\n\n  $ rucio-admin subscription add test \'{"scope": ["mock"], "project": ["test_project"]}\' \'[{"copies": 1, "rse_expression": "MOCK", "activity": "User Subscriptions"}]\' \'df\'\n\nCheck if there are rules for the DID::\n\n  $ rucio list-rules mock:test\n  ID                                ACCOUNT    SCOPE:NAME    STATE[OK/REPL/STUCK]    RSE_EXPRESSION      COPIES  EXPIRES (UTC)    CREATED (UTC)\n  --------------------------------  ---------  ------------  ----------------------  ----------------  --------  ---------------  -------------------\n\nRun the daemon::\n\n  $ rucio-transmogrifier --run-once\n\nCheck again if there are rules for the DID::\n\n  $ rucio list-rules mock:test\n  ID                                ACCOUNT    SCOPE:NAME    STATE[OK/REPL/STUCK]    RSE_EXPRESSION      COPIES  EXPIRES (UTC)    CREATED (UTC)\n  --------------------------------  ---------  ------------  ----------------------  ----------------  --------  ---------------  -------------------\n  e658f6f47f444326aad624dabef7b785  root       mock:test     OK[0/0/0]               MOCK                     1                   2018-12-03 14:01:19\n    \n')))}d.isMDXComponent=!0}}]);