"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[242],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,o=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(t),f=c,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var o=t.length,i=new Array(o);i[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[u]="string"==typeof e?e:c,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},41729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),c=t(63366),o=(t(67294),t(3905)),i=["components"],a={title:"rucio-cache-client"},s=void 0,l={unversionedId:"bin/rucio-cache-client",id:"bin/rucio-cache-client",title:"rucio-cache-client",description:"",source:"@site/../docs/bin/rucio-cache-client.md",sourceDirName:"bin",slug:"/bin/rucio-cache-client",permalink:"/documentation/bin/rucio-cache-client",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-cache-client.md",tags:[],version:"current",frontMatter:{title:"rucio-cache-client"},sidebar:"docs",previous:{title:"rucio-c3po",permalink:"/documentation/bin/rucio-c3po"},next:{title:"rucio-cache-consumer",permalink:"/documentation/bin/rucio-cache-consumer"}},p={},u=[],m={toc:u},f="wrapper";function d(e){var n=e.components,t=(0,c.Z)(e,i);return(0,o.kt)(f,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"usage: rucio-cache-client [-h] [-b BROKER] [-p PORT] [-c SSL_CERT_FILE]\n                          [-k SSL_KEY_FILE] [-d DESTINATION] [-m MESSAGE]\n\nThis daemons is used to populate information of replicas on volatile storage.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BROKER, --broker BROKER\n                        Message broker name\n  -p PORT, --port PORT  Message broker port\n  -c SSL_CERT_FILE, --certificate SSL_CERT_FILE\n                        Certificate file\n  -k SSL_KEY_FILE, --certificate-key SSL_KEY_FILE\n                        Certificate key file\n  -d DESTINATION, --destination DESTINATION\n                        Message broker topic\n  -m MESSAGE, --message MESSAGE\n                        Add replicas message: {'files': [{'scope': scope,\n                        'name': name, 'bytes': 1L, 'adler32': ''}, {'scope':\n                        scope, 'name': name, 'bytes': 1L, 'adler32': ''},\n                        ...], 'rse': rse_cache_name, 'lifetime': seconds,\n                        'operation': 'add_replicas' } Delete replicas message:\n                        {'files': [{'scope': scope, 'name': name}, {'scope':\n                        scope, 'name': name}, ...], 'rse': rse_cache_name,\n                        'operation': 'delete_replicas' }\n")))}d.isMDXComponent=!0}}]);